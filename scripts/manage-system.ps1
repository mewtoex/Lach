# Lach System - Management Script
# Script para gerenciar o sistema completo de microsservi√ßos

param(
    [Parameter(Mandatory=$true)]
    [ValidateSet("start", "stop", "restart", "status", "logs", "clean", "test", "monitor")]
    [string]$Action,
    
    [string]$Service = ""
)

Write-Host "üè™ Lach System - Management Console" -ForegroundColor Cyan
Write-Host "===================================" -ForegroundColor Cyan

function Show-Status {
    Write-Host "`nüìä Status dos Servi√ßos:" -ForegroundColor Cyan
    Write-Host "=====================" -ForegroundColor Cyan
    
    $services = @(
        @{Name="API Gateway"; Port=5000; Container="lach-api-gateway"},
        @{Name="Auth Service"; Port=5001; Container="lach-auth-service"},
        @{Name="Product Service"; Port=5002; Container="lach-product-service"},
        @{Name="Order Service"; Port=5003; Container="lach-order-service"},
        @{Name="Production Queue Service"; Port=5004; Container="lach-production-queue-service"},
        @{Name="Delivery Service"; Port=5005; Container="lach-delivery-service"},
        @{Name="WhatsApp Service"; Port=5006; Container="lach-whatsapp-service"},
        @{Name="Notification Service"; Port=5007; Container="lach-notification-service"},
        @{Name="Prometheus"; Port=9090; Container="lach-prometheus"},
        @{Name="Grafana"; Port=3002; Container="lach-grafana"},
        @{Name="Seq"; Port=5341; Container="lach-seq"},
        @{Name="AlertManager"; Port=9093; Container="lach-alertmanager"},
        @{Name="Frontend"; Port=3000; Container="lach-frontend"},
        @{Name="Admin Portal"; Port=3001; Container="lach-admin-portal"}
    )
    
    foreach ($service in $services) {
        $container = docker ps --filter "name=$($service.Container)" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" 2>$null
        if ($container -and $container.Length -gt 1) {
            $status = "‚úÖ Running"
            $color = "Green"
        } else {
            $status = "‚ùå Stopped"
            $color = "Red"
        }
        
        Write-Host "$($service.Name.PadRight(25)) | $status | http://localhost:$($service.Port)" -ForegroundColor $color
    }
    
    Write-Host "`nüîó URLs de Acesso:" -ForegroundColor Yellow
    Write-Host "API Gateway: http://localhost:5000" -ForegroundColor White
    Write-Host "Frontend: http://localhost:3000" -ForegroundColor White
    Write-Host "Admin Portal: http://localhost:3001" -ForegroundColor White
    Write-Host "Grafana: http://localhost:3002 (admin/admin123)" -ForegroundColor White
    Write-Host "Prometheus: http://localhost:9090" -ForegroundColor White
    Write-Host "Seq Logs: http://localhost:5341" -ForegroundColor White
    Write-Host "AlertManager: http://localhost:9093" -ForegroundColor White
}

function Start-System {
    Write-Host "`nüöÄ Iniciando o sistema..." -ForegroundColor Green
    
    # Check if .env exists
    if (-not (Test-Path ".env")) {
        Write-Host "‚ö†Ô∏è  Arquivo .env n√£o encontrado. Copiando de .env.example..." -ForegroundColor Yellow
        if (Test-Path ".env.example") {
            Copy-Item ".env.example" ".env"
            Write-Host "‚úÖ Arquivo .env criado. Configure as vari√°veis de ambiente antes de continuar." -ForegroundColor Green
            return
        } else {
            Write-Host "‚ùå Arquivo .env.example n√£o encontrado!" -ForegroundColor Red
            return
        }
    }
    
    # Start infrastructure services first
    Write-Host "üì¶ Iniciando servi√ßos de infraestrutura..." -ForegroundColor Blue
    docker-compose up -d postgres rabbitmq redis
    
    # Wait for infrastructure to be ready
    Write-Host "‚è≥ Aguardando servi√ßos de infraestrutura..." -ForegroundColor Yellow
    Start-Sleep -Seconds 10
    
    # Start all services
    Write-Host "üöÄ Iniciando todos os servi√ßos..." -ForegroundColor Blue
    docker-compose up -d
    
    Write-Host "‚úÖ Sistema iniciado com sucesso!" -ForegroundColor Green
    Show-Status
}

function Stop-System {
    Write-Host "`nüõë Parando o sistema..." -ForegroundColor Red
    docker-compose down
    Write-Host "‚úÖ Sistema parado!" -ForegroundColor Green
}

function Restart-System {
    Write-Host "`nüîÑ Reiniciando o sistema..." -ForegroundColor Yellow
    Stop-System
    Start-Sleep -Seconds 5
    Start-System
}

function Show-Logs {
    if ($Service -eq "") {
        Write-Host "`nüìù Logs de todos os servi√ßos (Ctrl+C para sair):" -ForegroundColor Cyan
        docker-compose logs -f
    } else {
        Write-Host "`nüìù Logs do servi√ßo $Service (Ctrl+C para sair):" -ForegroundColor Cyan
        docker-compose logs -f $Service
    }
}

function Clean-System {
    Write-Host "`nüßπ Limpando o sistema..." -ForegroundColor Yellow
    
    Write-Host "üõë Parando containers..." -ForegroundColor Blue
    docker-compose down
    
    Write-Host "üóëÔ∏è  Removendo containers..." -ForegroundColor Blue
    docker-compose rm -f
    
    Write-Host "üóëÔ∏è  Removendo volumes..." -ForegroundColor Blue
    docker volume prune -f
    
    Write-Host "üóëÔ∏è  Removendo imagens..." -ForegroundColor Blue
    docker image prune -f
    
    Write-Host "‚úÖ Sistema limpo!" -ForegroundColor Green
}

function Run-Tests {
    Write-Host "`nüß™ Executando testes..." -ForegroundColor Cyan
    
    if (Test-Path "scripts/run-tests.ps1") {
        & "scripts/run-tests.ps1"
    } else {
        Write-Host "‚ùå Script de testes n√£o encontrado!" -ForegroundColor Red
    }
}

function Show-Monitoring {
    Write-Host "`nüìä Monitoramento do Sistema" -ForegroundColor Cyan
    Write-Host "=========================" -ForegroundColor Cyan
    
    Write-Host "`nüîó Dashboards:" -ForegroundColor Yellow
    Write-Host "Grafana: http://localhost:3002 (admin/admin123)" -ForegroundColor White
    Write-Host "Prometheus: http://localhost:9090" -ForegroundColor White
    Write-Host "Seq Logs: http://localhost:5341" -ForegroundColor White
    Write-Host "AlertManager: http://localhost:9093" -ForegroundColor White
    
    Write-Host "`nüè• Health Checks:" -ForegroundColor Yellow
    $healthEndpoints = @(
        @{Name="API Gateway"; Url="http://localhost:5000/health"},
        @{Name="Auth Service"; Url="http://localhost:5001/health"},
        @{Name="Product Service"; Url="http://localhost:5002/health"},
        @{Name="Order Service"; Url="http://localhost:5003/health"},
        @{Name="Production Queue Service"; Url="http://localhost:5004/health"},
        @{Name="Delivery Service"; Url="http://localhost:5005/health"},
        @{Name="WhatsApp Service"; Url="http://localhost:5006/health"},
        @{Name="Notification Service"; Url="http://localhost:5007/health"}
    )
    
    foreach ($endpoint in $healthEndpoints) {
        try {
            $response = Invoke-WebRequest -Uri $endpoint.Url -TimeoutSec 5 -ErrorAction Stop
            if ($response.StatusCode -eq 200) {
                Write-Host "$($endpoint.Name): ‚úÖ Healthy" -ForegroundColor Green
            } else {
                Write-Host "$($endpoint.Name): ‚ö†Ô∏è  Unhealthy ($($response.StatusCode))" -ForegroundColor Yellow
            }
        } catch {
            Write-Host "$($endpoint.Name): ‚ùå Unreachable" -ForegroundColor Red
        }
    }
    
    Write-Host "`nüìà M√©tricas R√°pidas:" -ForegroundColor Yellow
    try {
        $metrics = Invoke-WebRequest -Uri "http://localhost:9090/api/v1/query?query=up" -TimeoutSec 5
        $data = $metrics.Content | ConvertFrom-Json
        if ($data.data.result) {
            Write-Host "Prometheus: ‚úÖ Coletando m√©tricas" -ForegroundColor Green
        } else {
            Write-Host "Prometheus: ‚ö†Ô∏è  Sem dados" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "Prometheus: ‚ùå Inacess√≠vel" -ForegroundColor Red
    }
}

# Main execution
switch ($Action.ToLower()) {
    "start" { Start-System }
    "stop" { Stop-System }
    "restart" { Restart-System }
    "status" { Show-Status }
    "logs" { Show-Logs }
    "clean" { Clean-System }
    "test" { Run-Tests }
    "monitor" { Show-Monitoring }
    default {
        Write-Host "‚ùå A√ß√£o inv√°lida!" -ForegroundColor Red
        Write-Host "A√ß√µes dispon√≠veis: start, stop, restart, status, logs, clean, test, monitor" -ForegroundColor Yellow
    }
} 