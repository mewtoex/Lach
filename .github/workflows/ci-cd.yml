name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build and Test
  build-and-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lach_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: admin
          RABBITMQ_DEFAULT_PASS: admin
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5672:5672
          - 15672:15672

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: whatsapp-web-service/package-lock.json

    - name: Restore dependencies
      run: dotnet restore

    - name: Install Node.js dependencies
      run: |
        cd whatsapp-web-service
        npm ci

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Run tests
      run: |
        dotnet test --no-build --verbosity normal --configuration Release --collect:"XPlat Code Coverage" --results-directory ./coverage
        dotnet tool install --global dotnet-reportgenerator-globaltool
        reportgenerator -reports:"./coverage/**/coverage.cobertura.xml" -targetdir:"./coverage/reports" -reporttypes:Html

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/reports/Cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Run integration tests
      run: |
        dotnet test --no-build --verbosity normal --configuration Release --filter Category=Integration
      env:
        ConnectionStrings__DefaultConnection: "Host=localhost;Database=lach_test;Username=postgres;Password=postgres"
        RabbitMQ__Host: localhost
        RabbitMQ__Username: admin
        RabbitMQ__Password: admin

    - name: Build Docker images
      run: |
        docker build -t lach-auth-service:latest -f src/Services/AuthService/Dockerfile .
        docker build -t lach-product-service:latest -f src/Services/ProductService/Dockerfile .
        docker build -t lach-order-service:latest -f src/Services/OrderService/Dockerfile .
        docker build -t lach-production-queue-service:latest -f src/Services/ProductionQueueService/Dockerfile .
        docker build -t lach-delivery-service:latest -f src/Services/DeliveryService/Dockerfile .
        docker build -t lach-whatsapp-service:latest -f src/Services/WhatsAppService/Dockerfile .
        docker build -t lach-notification-service:latest -f src/Services/NotificationService/Dockerfile .
        docker build -t lach-api-gateway:latest -f src/Gateway/API.Gateway/Dockerfile .
        docker build -t lach-whatsapp-web-service:latest -f whatsapp-web-service/Dockerfile whatsapp-web-service/

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Build and Push Docker Images
  build-and-push:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: Build and push Auth Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Services/AuthService/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/auth-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Product Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Services/ProductService/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/product-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Order Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Services/OrderService/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/order-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Production Queue Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Services/ProductionQueueService/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/production-queue-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Delivery Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Services/DeliveryService/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/delivery-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push WhatsApp Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Services/WhatsAppService/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/whatsapp-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Notification Service
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Services/NotificationService/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/notification-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push API Gateway
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/Gateway/API.Gateway/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-gateway:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push WhatsApp Web Service
      uses: docker/build-push-action@v5
      with:
        context: whatsapp-web-service
        file: whatsapp-web-service/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/whatsapp-web-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # Example: kubectl apply -f k8s/production/
        # Example: docker-compose -f docker-compose.production.yml up -d

  # Notify on Success/Failure
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on deployment status
      run: |
        if [ "${{ needs.deploy-staging.result }}" == "success" ] || [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "Deployment successful!"
          # Add notification logic (Slack, Teams, etc.)
        else
          echo "Deployment failed!"
          # Add failure notification logic
        fi 